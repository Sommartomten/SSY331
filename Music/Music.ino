int note[] = {
392, 523, 494, 622, 587, 440, 554, 659, 740, 0, 880, 988, 1047, 1175, 784, 466, 370, 330, 349, 698, 294, 262
  };
int time[] = {
252, 126, 504, 378, 168, 756, 1008, 0
  };
byte melody[] = { 
0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 2, 6, 4, 7, 8, 5, 9, 10, 11, 12, 13, 9, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 7, 7, 7, 7, 4, 7, 8, 14, 10, 9, 13, 9, 14, 9, 1, 1, 2, 15, 2, 15, 2, 15, 2, 5, 0, 16, 0, 0, 9, 0, 5, 17, 18, 0, 2, 14, 14, 0, 19, 7, 0, 4, 1, 17, 5, 0, 0, 9, 1, 1, 2, 15, 2, 15, 2, 15, 2, 5, 0, 16, 0, 0, 9, 0, 5, 17, 20, 0, 2, 4, 20, 16, 5, 4, 0, 0, 0, 0, 0, 0, 9, 1, 1, 2, 15, 2, 15, 2, 15, 2, 5, 0, 16, 0, 0, 9, 0, 5, 17, 18, 0, 2, 14, 14, 0, 19, 7, 0, 4, 1, 17, 5, 0, 0, 9, 1, 1, 2, 15, 2, 15, 2, 15, 2, 5, 0, 16, 0, 0, 9, 0, 5, 17, 20, 0, 2, 4, 20, 16, 5, 4, 0, 0, 0, 0, 0, 0, 0, 5, 2, 1, 0, 7, 2, 1, 10, 14, 7, 7, 14, 19, 4, 14, 7, 1, 0, 1, 1, 0, 0, 7, 7, 2, 1, 10, 14, 7, 7, 14, 14, 19, 19, 4, 4, 14, 14, 1, 0, 0, 1, 0, 0, 1, 0, 5, 2, 1, 0, 7, 2, 1, 10, 14, 7, 7, 14, 19, 4, 14, 7, 1, 0, 1, 1, 0, 0, 7, 7, 2, 1, 10, 14, 7, 7, 14, 14, 19, 19, 4, 4, 14, 14, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 9, 9, 9, 1, 4, 5, 4, 1, 5, 18, 21, 21, 9, 18, 5, 20, 21, 18, 4, 17, 17, 9, 1, 4, 15, 4, 1, 15, 17, 21, 21, 9, 17, 0, 20, 21, 17, 1, 5, 5, 9, 1, 4, 5, 4, 1, 5, 18, 21, 21, 9, 18, 5, 20, 21, 18, 19, 19, 19, 19, 19, 19, 19, 19, 7, 4, 4, 4, 1, 5, 18, 21, 15, 5, 0, 18, 18, 1, 4, 5, 4, 1, 5, 18, 21, 21, 9, 18, 5, 20, 21, 18, 4, 17, 17, 9, 1, 4, 15, 4, 1, 15, 17, 21, 21, 9, 17, 0, 20, 21, 17, 1, 5, 5, 9, 1, 4, 5, 4, 1, 5, 18, 21, 21, 9, 18, 5, 20, 21, 18, 19, 19, 19, 19, 19, 19, 19, 19, 7, 4, 4, 4, 1, 5, 18, 21, 15, 5, 0, 18, 1, 19, 19, 19, 19, 9, 9
};
byte noteDurations[] = { 
0, 1, 1, 2, 0, 1, 1, 2, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 1, 1, 2, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 1, 3, 1, 3, 1, 3, 1, 0, 0, 3, 1, 2, 0, 0, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 0, 0, 3, 1, 3, 1, 3, 1, 3, 1, 0, 0, 3, 1, 2, 0, 0, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 2, 0, 1, 1, 0, 0, 0, 0, 3, 1, 3, 1, 3, 1, 3, 1, 0, 0, 3, 1, 2, 0, 0, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 0, 0, 3, 1, 3, 1, 3, 1, 3, 1, 0, 0, 3, 1, 2, 0, 0, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 5, 0, 2, 2, 2, 2, 6, 5, 0, 3, 1, 3, 1, 3, 1, 0, 0, 2, 2, 5, 0, 3, 1, 3, 1, 3, 1, 3, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 5, 0, 2, 2, 2, 2, 6, 5, 0, 3, 1, 3, 1, 3, 1, 0, 0, 2, 2, 5, 0, 3, 1, 3, 1, 3, 1, 3, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 6, 2, 2, 2, 0, 0, 2, 0, 0, 6, 0, 0, 0, 0, 2, 2, 2, 2, 6, 0, 0, 2, 2, 0, 0, 2, 0, 0, 6, 0, 0, 0, 0, 2, 2, 2, 2, 6, 0, 0, 2, 2, 0, 0, 2, 0, 0, 6, 0, 0, 0, 0, 2, 2, 2, 2, 6, 0, 0, 0, 0, 2, 2, 2, 2, 6, 0, 0, 0, 0, 2, 2, 2, 2, 6, 2, 2, 2, 0, 0, 2, 0, 0, 6, 0, 0, 0, 0, 2, 2, 2, 2, 6, 0, 0, 2, 2, 0, 0, 2, 0, 0, 6, 0, 0, 0, 0, 2, 2, 2, 2, 6, 0, 0, 2, 2, 0, 0, 2, 0, 0, 6, 0, 0, 0, 0, 2, 2, 2, 2, 6, 0, 0, 0, 0, 2, 2, 2, 2, 6, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 1, 1, 0, 0, 7
};
bool notePlaying = false;
 int thisNote = 0; // Initialize the loop counter
  unsigned long noteStartTime = 0;
void setup() {
  pinMode(3,OUTPUT);
  digitalWrite(3,HIGH);
  Serial.begin(9600);
 /* for (int thisNote = 0; thisNote < sizeof(melody) / sizeof(int); thisNote++)
  {   
    tone(6, note[melody[thisNote]], time[noteDurations[thisNote]] * .7);    
    delay(time[noteDurations[thisNote]]);    
    noTone(6);
  }*/
}

void loop() {
  if (!notePlaying) {
      // Start the note and record the start time
      tone(6, note[melody[thisNote]], time[noteDurations[thisNote]]*1.1); 
      noteStartTime = millis();  // Record the current time as the start time
      notePlaying = true; // Set the flag to indicate the note is playing
      Serial.println(thisNote);
    }

    // Check if the note's duration has passed
  else if (millis() - noteStartTime >= time[noteDurations[thisNote]]*1.1) {
      // Stop the note after the duration has passed
      noTone(6); 
      notePlaying = false; // Reset the flag to indicate the note has stopped
      thisNote++; // Move to the next note
      if (thisNote > sizeof(melody)/ sizeof(melody[0])){
        thisNote=0;
      }
}}
